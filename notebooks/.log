2021-07-05 20:04:46,489 [15828] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:04:46,489 [15828] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:04:46,489 [15828] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:04:46,491 [15828] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:04:46,491 [15828] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:04:46,492 [15828] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:04:47,005 [15828] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:04:47,005 [15828] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:04:47,006 [15828] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:04:47,007 [15828] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:04:47,008 [15828] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:04:47,008 [15828] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:08:00,188 [15828] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-05 20:08:02,245 [15828] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-05 20:08:02,246 [15828] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-05 20:08:02,256 [15828] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-05 20:08:02,256 [15828] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-05 20:08:02,258 [15828] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-05 20:08:02,258 [15828] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-05 20:08:02,258 [15828] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-05 20:08:02,258 [15828] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.utils.multiclass', 'sklearn.neighbors._typedefs', 'sklearn.neighbors._dist_metrics', 'sklearn.neighbors._ball_tree', 'sklearn.neighbors._kd_tree', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._function_transformer', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.neighbors._base', 'sklearn.neighbors._unsupervised', 'sklearn.neighbors._graph', 'sklearn.neighbors._classification', 'sklearn.neighbors._regression', 'sklearn.neighbors._nearest_centroid', 'sklearn.neighbors._kde', 'sklearn.neighbors._lof', 'sklearn.utils._random', 'sklearn.utils._seq_dataset', 'sklearn.linear_model._base', 'sklearn.linear_model._bayes', 'sklearn.utils._cython_blas', 'sklearn.utils.arrayfuncs', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.model_selection._validation', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'sklearn.linear_model._least_angle', 'sklearn.linear_model._cd_fast', 'sklearn.linear_model._coordinate_descent', 'sklearn.utils.optimize', 'sklearn.linear_model._glm.link', 'sklearn.linear_model._glm.glm', 'sklearn.linear_model._glm', 'sklearn.linear_model._huber', 'sklearn.utils._weight_vector', 'sklearn.linear_model._sgd_fast', 'sklearn.linear_model._stochastic_gradient', 'sklearn.linear_model._sag_fast', 'sklearn.linear_model._sag', 'sklearn.linear_model._ridge', 'sklearn.svm._libsvm', 'sklearn.svm._liblinear', 'sklearn.svm._libsvm_sparse', 'sklearn.svm._base', 'sklearn.svm._classes', 'sklearn.svm._bounds', 'sklearn.svm', 'sklearn.linear_model._logistic', 'sklearn.linear_model._omp', 'sklearn.linear_model._passive_aggressive', 'sklearn.linear_model._perceptron', 'sklearn.linear_model._ransac', 'sklearn.linear_model._theil_sen', 'sklearn.linear_model', 'sklearn.decomposition._dict_learning', 'sklearn.externals', 'sklearn.externals._pep562', 'sklearn.decomposition.dict_learning', 'sklearn.decomposition._cdnmf_fast', 'sklearn.decomposition._nmf', 'sklearn.decomposition._base', 'sklearn.decomposition._pca', 'sklearn.decomposition._incremental_pca', 'sklearn.decomposition._kernel_pca', 'sklearn.decomposition._sparse_pca', 'sklearn.decomposition._truncated_svd', 'sklearn.decomposition._fastica', 'sklearn.decomposition._factor_analysis', 'sklearn.decomposition._online_lda_fast', 'sklearn.decomposition._lda', 'sklearn.decomposition', 'sklearn.neighbors._nca', 'sklearn.neighbors', 'sklearn.tree._utils', 'sklearn.neighbors._quad_tree', 'sklearn.tree._tree', 'sklearn.tree._splitter', 'sklearn.tree._criterion', 'sklearn.tree._classes', 'sklearn.tree._reingold_tilford', 'sklearn.tree._export', 'sklearn.tree', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-05 20:08:05,222 [15828] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-05 20:13:24,005 [4036] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:13:24,005 [4036] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:13:24,005 [4036] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:13:24,008 [4036] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:13:24,008 [4036] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:13:24,009 [4036] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:13:24,518 [4036] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:13:24,518 [4036] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:13:24,519 [4036] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:13:24,520 [4036] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:13:24,520 [4036] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:13:24,521 [4036] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:15:05,348 [4036] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-05 20:15:06,251 [4036] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-05 20:15:06,251 [4036] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-05 20:15:06,254 [4036] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-05 20:15:06,254 [4036] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-05 20:15:06,256 [4036] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-05 20:15:06,256 [4036] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-05 20:15:06,257 [4036] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-05 20:15:06,257 [4036] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-05 20:15:07,414 [4036] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-05 20:23:13,009 [17644] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:23:13,009 [17644] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:23:13,009 [17644] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:23:13,012 [17644] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:23:13,012 [17644] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:23:13,013 [17644] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:23:13,521 [17644] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:23:13,522 [17644] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:23:13,522 [17644] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:23:13,524 [17644] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:23:13,524 [17644] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:23:13,524 [17644] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-05 20:23:33,928 [17644] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-05 20:23:33,928 [17644] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-05 20:23:33,928 [17644] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-05 20:23:33,931 [17644] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-05 20:23:33,932 [17644] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-05 20:23:33,932 [17644] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-06 20:49:47,886 [6228] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-06 20:49:47,887 [6228] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-06 20:49:47,887 [6228] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-06 20:49:47,889 [6228] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-06 20:49:47,889 [6228] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-06 20:49:47,889 [6228] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-06 20:49:48,397 [6228] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-06 20:49:48,398 [6228] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-06 20:49:48,398 [6228] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-06 20:49:48,402 [6228] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-06 20:49:48,403 [6228] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-06 20:49:48,404 [6228] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-07 17:50:32,656 [11128] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-07 17:50:32,663 [11128] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-07 17:50:32,663 [11128] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-07 17:50:32,669 [11128] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-07 17:50:32,670 [11128] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-07 17:50:32,671 [11128] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-07 17:50:33,184 [11128] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-07 17:50:33,185 [11128] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-07 17:50:33,185 [11128] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-07 17:50:33,188 [11128] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-07 17:50:33,188 [11128] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-07 17:50:33,189 [11128] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-07 17:52:05,638 [11128] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-07 17:52:08,126 [11128] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-07 17:52:08,127 [11128] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-07 17:52:08,143 [11128] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-07 17:52:08,143 [11128] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-07 17:52:08,146 [11128] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-07 17:52:08,146 [11128] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-07 17:52:08,146 [11128] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-07 17:52:08,146 [11128] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-07 17:52:12,088 [11128] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-08 13:44:02,554 [2596] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-08 13:44:02,554 [2596] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-08 13:44:02,555 [2596] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-08 13:44:02,559 [2596] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-08 13:44:02,561 [2596] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-08 13:44:02,562 [2596] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-08 13:44:03,358 [2596] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-08 13:44:03,358 [2596] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-08 13:44:03,359 [2596] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-08 13:44:03,363 [2596] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-08 13:44:03,364 [2596] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-08 13:44:03,364 [2596] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-08 13:44:47,445 [2596] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-08 13:44:51,417 [2596] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-08 13:44:51,419 [2596] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-08 13:44:51,440 [2596] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-08 13:44:51,441 [2596] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-08 13:44:51,447 [2596] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-08 13:44:51,447 [2596] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-08 13:44:51,447 [2596] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-08 13:44:51,447 [2596] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-08 13:44:56,534 [2596] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-09 14:49:59,713 [22688] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-09 14:49:59,714 [22688] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-09 14:49:59,714 [22688] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-09 14:49:59,716 [22688] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-09 14:49:59,716 [22688] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-09 14:49:59,716 [22688] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-09 14:52:47,987 [22688] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-09 14:52:50,162 [22688] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-09 14:52:50,162 [22688] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-09 14:52:50,172 [22688] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-09 14:52:50,172 [22688] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-09 14:52:50,174 [22688] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-09 14:52:50,174 [22688] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-09 14:52:50,175 [22688] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-09 14:52:50,175 [22688] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-09 14:52:53,458 [22688] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-09 15:14:16,408 [19100] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-09 15:14:16,409 [19100] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-09 15:14:16,409 [19100] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-09 15:14:16,411 [19100] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-09 15:14:16,412 [19100] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-09 15:14:16,412 [19100] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-10 17:54:42,614 [14544] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-10 17:54:42,615 [14544] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-10 17:54:42,615 [14544] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-10 17:54:42,620 [14544] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-10 17:54:42,620 [14544] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-10 17:54:42,622 [14544] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-10 17:54:43,432 [14544] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-10 17:54:43,432 [14544] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-10 17:54:43,432 [14544] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-10 17:54:43,439 [14544] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-10 17:54:43,440 [14544] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-10 17:54:43,442 [14544] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-10 17:55:14,166 [14544] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-10 17:55:18,304 [14544] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-10 17:55:18,305 [14544] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-10 17:55:18,329 [14544] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-10 17:55:18,329 [14544] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-10 17:55:18,335 [14544] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-10 17:55:18,336 [14544] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-10 17:55:18,336 [14544] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-10 17:55:18,336 [14544] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-10 17:55:23,910 [14544] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-11 10:28:10,024 [2940] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-11 10:28:10,025 [2940] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-11 10:28:10,026 [2940] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-11 10:28:10,039 [2940] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-11 10:28:10,041 [2940] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-11 10:28:10,042 [2940] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-11 10:28:10,834 [2940] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-11 10:28:10,834 [2940] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-11 10:28:10,834 [2940] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-11 10:28:10,838 [2940] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-11 10:28:10,839 [2940] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-11 10:28:10,840 [2940] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-12 19:45:40,847 [7172] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-12 19:45:40,848 [7172] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-12 19:45:40,848 [7172] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-12 19:45:40,850 [7172] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-12 19:45:40,851 [7172] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-12 19:45:40,852 [7172] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-12 19:54:40,516 [7172] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-12 19:54:42,382 [7172] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-12 19:54:42,383 [7172] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-12 19:54:42,392 [7172] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-12 19:54:42,392 [7172] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-12 19:54:42,394 [7172] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-12 19:54:42,394 [7172] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-12 19:54:42,394 [7172] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-12 19:54:42,395 [7172] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'eli5', 'eli5.formatters', 'tabulate', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version_info', 'attr', 'eli5.base_utils', 'eli5.formatters.features', 'eli5.base', 'eli5.formatters.fields', 'eli5.formatters.utils', 'eli5.formatters.trees', 'eli5.formatters.text', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'jinja2._compat', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'jinja2.tests', 'jinja2.defaults', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'graphviz._compat', 'graphviz.tools', 'graphviz.backend', 'graphviz.files', 'graphviz.lang', 'graphviz.dot', 'graphviz', 'eli5._graphviz', 'eli5.utils', 'eli5.formatters.text_helpers', 'xml.parsers', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'jinja2.ext', 'eli5.formatters.html', 'eli5.formatters.as_dataframe', 'eli5.formatters.as_dict', 'eli5.formatters.image', 'PIL._version', 'PIL', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-12 19:54:45,418 [7172] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-12 19:56:55,917 [7172] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\30041519\.matplotlib
2021-07-12 19:56:55,927 [7172] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\30041519\.matplotlib\fontlist-v310.json
2021-07-12 19:56:56,263 [7172] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-12 19:56:56,264 [7172] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-12 19:56:56,484 [7172] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-07-12 19:56:56,484 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,485 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,485 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,485 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,485 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,485 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,486 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,487 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-12 19:56:56,487 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,487 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,487 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,487 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,488 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-12 19:56:56,489 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,489 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,489 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,489 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,490 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,490 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,490 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,491 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,491 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,491 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,492 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,493 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,494 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,495 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,496 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,497 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,498 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,499 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,500 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,501 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,502 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,503 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,504 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,504 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,504 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,504 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,505 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,505 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,505 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,506 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,507 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,507 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,508 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,508 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,508 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,508 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,508 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,509 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,509 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,509 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,509 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,509 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,510 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,510 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,510 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,510 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,510 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,511 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,511 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,511 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,511 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,511 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,512 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,513 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-12 19:56:56,514 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,515 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,515 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-12 19:56:56,515 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,515 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,515 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,516 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,516 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,516 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,516 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,516 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,517 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,518 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,519 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,520 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,521 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-12 19:56:56,521 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,521 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,521 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,521 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,522 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,523 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,524 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,525 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,526 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,527 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,528 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,529 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,530 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,531 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,532 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-12 19:56:56,533 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,534 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,535 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,536 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,536 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,536 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,536 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,536 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,537 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,537 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,537 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,537 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,537 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,538 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,538 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,538 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,538 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,538 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-12 19:56:56,539 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,539 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,539 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,539 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,539 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,540 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,541 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,542 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,543 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,543 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,543 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,543 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-12 19:56:56,543 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,544 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,545 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,546 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,547 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,547 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,547 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,547 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,547 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,548 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,548 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,548 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-12 19:56:56,548 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,548 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,549 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,550 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,551 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,552 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,553 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,554 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-12 19:56:56,554 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,554 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,554 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,554 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-12 19:56:56,555 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,556 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,557 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,558 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,559 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,560 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,561 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,562 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-12 19:56:56,563 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,564 [7172] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,584 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,585 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,586 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,587 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,587 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,587 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,587 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-12 19:56:56,587 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,588 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,588 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,588 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,588 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,589 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,589 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,589 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,589 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,589 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,590 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,591 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,592 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,592 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,592 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,592 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,592 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,593 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,593 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-12 19:56:56,593 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,593 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-12 19:56:56,594 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,595 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,596 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,597 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,598 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,598 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,598 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,598 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,598 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,599 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,600 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,600 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,600 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,600 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,601 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,602 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-12 19:56:56,602 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,602 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,602 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,603 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,604 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,605 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,606 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,607 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,608 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,609 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,610 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,611 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,612 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,613 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,614 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,615 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,616 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,616 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,616 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,616 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,617 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,617 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,617 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,617 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,618 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,618 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-12 19:56:56,618 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,618 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,618 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,619 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,620 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,621 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,622 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,623 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,624 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,625 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,626 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,627 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-12 19:56:56,628 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,629 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,630 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,631 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,632 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,632 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,632 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,632 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-12 19:56:56,632 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-12 19:56:56,633 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,633 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,633 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,633 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,634 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,634 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,634 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,634 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-12 19:56:56,634 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,635 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,636 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-12 19:56:56,637 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,638 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,639 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,640 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,641 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-12 19:56:56,642 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,643 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-12 19:56:56,644 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,645 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,646 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,647 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,648 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,649 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,650 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-12 19:56:56,651 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,652 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,653 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-12 19:56:56,653 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,653 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,653 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,654 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-12 19:56:56,655 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-12 19:56:56,656 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-12 19:56:56,656 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,656 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-12 19:56:56,656 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,656 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-12 19:56:56,657 [7172] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-12 19:56:56,657 [7172] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-13 16:15:31,301 [14880] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-13 16:15:31,301 [14880] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-13 16:15:31,302 [14880] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-13 16:15:31,305 [14880] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-13 16:15:31,305 [14880] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-13 16:15:31,306 [14880] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-13 16:15:31,814 [14880] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-13 16:15:31,814 [14880] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-13 16:15:31,814 [14880] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-13 16:15:31,816 [14880] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-13 16:15:31,816 [14880] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-13 16:15:31,817 [14880] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-13 16:15:51,149 [14880] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-13 16:15:52,161 [14880] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-13 16:15:52,162 [14880] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-13 16:15:52,170 [14880] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-13 16:15:52,170 [14880] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-13 16:15:52,172 [14880] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-13 16:15:52,172 [14880] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-13 16:15:52,172 [14880] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-13 16:15:52,173 [14880] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-13 16:15:52,237 [14880] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\30041519\.matplotlib
2021-07-13 16:15:52,246 [14880] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\30041519\.matplotlib\fontlist-v310.json
2021-07-13 16:15:52,621 [14880] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-13 16:15:52,624 [14880] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-13 16:15:56,664 [14880] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-13 16:16:37,704 [14880] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-07-13 16:16:37,705 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,705 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,705 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,705 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,705 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,706 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,706 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-13 16:16:37,706 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,706 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-13 16:16:37,707 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,708 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,709 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,709 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-13 16:16:37,709 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,709 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,710 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,711 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,712 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,713 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,713 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,713 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,713 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,714 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,714 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-13 16:16:37,715 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,715 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,716 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,717 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,718 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,719 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-13 16:16:37,720 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,721 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,722 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,723 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,724 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,724 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,724 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,724 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,724 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,725 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,726 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,727 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,728 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,729 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,729 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,729 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,729 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,729 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,730 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,731 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,732 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,733 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-13 16:16:37,734 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,734 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,734 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-13 16:16:37,734 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,734 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,735 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,736 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,736 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,736 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-13 16:16:37,736 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,736 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,737 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,738 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-13 16:16:37,739 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,739 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-13 16:16:37,739 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,739 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,739 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,740 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,741 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-13 16:16:37,742 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,743 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,744 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,745 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,746 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,747 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,748 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,749 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,750 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,750 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-13 16:16:37,750 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,750 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,750 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,751 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,751 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,751 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,751 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,752 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,753 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,754 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,755 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,756 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-13 16:16:37,756 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,756 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-13 16:16:37,756 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,756 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,757 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,758 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,759 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,759 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,759 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,759 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-13 16:16:37,759 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,760 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,761 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,762 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,762 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,763 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,763 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,763 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,763 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,764 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,764 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,764 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,764 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,765 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,765 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,765 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,766 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-13 16:16:37,766 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,766 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,766 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,766 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,767 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,767 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,767 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,767 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,767 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,768 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,768 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,768 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,768 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,768 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,769 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,770 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,770 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,770 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,770 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,770 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,771 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,772 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,773 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,774 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,775 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,775 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,775 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,775 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,775 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,776 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,776 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,776 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,776 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,776 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,777 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,778 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,779 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-13 16:16:37,779 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-13 16:16:37,779 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,779 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-13 16:16:37,779 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,780 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,780 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,780 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,780 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,781 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,781 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,781 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,781 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,782 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,782 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,782 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,783 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-13 16:16:37,783 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,783 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,783 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,784 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,784 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,784 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,784 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,785 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,785 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,785 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,785 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,786 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,787 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,788 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,789 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,789 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,789 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,790 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,790 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,790 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,791 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-13 16:16:37,791 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,791 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,791 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,792 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,792 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,792 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,792 [14880] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-13 16:16:37,826 [14880] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-07-13 16:16:37,827 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,827 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,828 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,828 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,828 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,829 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,829 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-13 16:16:37,829 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,830 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-13 16:16:37,830 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,832 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,833 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,834 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,834 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-13 16:16:37,835 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,835 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,835 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,835 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,836 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,836 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,836 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,836 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,837 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,837 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-13 16:16:37,837 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,837 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,837 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,838 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,839 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,840 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-13 16:16:37,841 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-13 16:16:37,842 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,843 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,844 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,845 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,846 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,846 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,846 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,846 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,847 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,847 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-13 16:16:37,848 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,848 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,849 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,850 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,851 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,852 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,853 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,854 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,855 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,856 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,857 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,858 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,858 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,858 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,858 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-13 16:16:37,859 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,860 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,861 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,862 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-13 16:16:37,863 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,863 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-13 16:16:37,863 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,863 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,863 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,864 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-13 16:16:37,864 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,864 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,864 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,865 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,865 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,865 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,865 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,865 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,866 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,867 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,868 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,869 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,870 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,871 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,872 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,873 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-13 16:16:37,874 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-13 16:16:37,875 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,876 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,876 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,876 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,876 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-13 16:16:37,876 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-13 16:16:37,877 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,878 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,879 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,880 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,880 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,880 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,881 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,882 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,883 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,884 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,884 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,884 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-13 16:16:37,884 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,884 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,885 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,886 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,887 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,888 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,889 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,890 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,891 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,892 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,893 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,894 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-13 16:16:37,895 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-13 16:16:37,896 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,897 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,897 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,897 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-13 16:16:37,898 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,898 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,898 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,898 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,899 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,900 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,900 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,900 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,900 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,900 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,901 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,902 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-13 16:16:37,903 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,904 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,905 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,906 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-13 16:16:37,907 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,908 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,909 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,909 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,909 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-13 16:16:37,909 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,909 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,910 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-13 16:16:37,911 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-13 16:16:37,912 [14880] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-13 16:16:37,913 [14880] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-14 15:42:07,455 [14716] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-14 15:42:07,455 [14716] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-14 15:42:07,455 [14716] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-14 15:42:07,457 [14716] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-14 15:42:07,458 [14716] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-14 15:42:07,459 [14716] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-14 15:42:08,231 [14716] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-14 15:42:08,231 [14716] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-14 15:42:08,232 [14716] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-14 15:42:08,236 [14716] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-14 15:42:08,237 [14716] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-14 15:42:08,238 [14716] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-14 19:40:28,209 [15468] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-14 19:40:28,210 [15468] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-14 19:40:28,210 [15468] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-14 19:40:28,213 [15468] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-14 19:40:28,214 [15468] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-14 19:40:28,214 [15468] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-19 18:49:31,812 [7388] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-19 18:49:31,812 [7388] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-19 18:49:31,812 [7388] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-19 18:49:31,814 [7388] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-19 18:49:31,815 [7388] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-19 18:49:31,815 [7388] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-19 18:49:32,693 [7388] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-19 18:49:32,695 [7388] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-19 18:49:32,696 [7388] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-19 18:49:32,698 [7388] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-19 18:49:32,699 [7388] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-19 18:49:32,699 [7388] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-19 18:49:54,189 [7388] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-19 18:49:55,251 [7388] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-19 18:49:55,252 [7388] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-19 18:49:55,260 [7388] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-19 18:49:55,261 [7388] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-19 18:49:55,262 [7388] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-19 18:49:55,262 [7388] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-19 18:49:55,262 [7388] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-19 18:49:55,262 [7388] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-19 18:49:55,333 [7388] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\30041519\.matplotlib
2021-07-19 18:49:55,346 [7388] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\30041519\.matplotlib\fontlist-v310.json
2021-07-19 18:49:55,684 [7388] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-19 18:49:55,688 [7388] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-19 18:49:59,939 [7388] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-19 18:50:45,669 [7388] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-07-19 18:50:45,669 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,670 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,670 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,670 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,670 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,671 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,672 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-19 18:50:45,673 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,674 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,674 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,674 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,674 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,674 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,675 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,675 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,675 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,675 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,675 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,676 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,677 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-19 18:50:45,678 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-19 18:50:45,679 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,680 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,681 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,682 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,683 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,684 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,685 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-19 18:50:45,686 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,687 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,688 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,689 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,690 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,691 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,692 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,693 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,694 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,695 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,696 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,697 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,697 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,697 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,697 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,698 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,699 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-19 18:50:45,700 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,701 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,702 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-19 18:50:45,703 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,704 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,705 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,706 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,706 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,706 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,706 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,707 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,708 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,709 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,710 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,710 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,710 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,710 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,710 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,711 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,712 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,713 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,714 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,715 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,716 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,717 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,718 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,719 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,720 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,721 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,722 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,723 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,724 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,725 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,726 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,727 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,728 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,729 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,730 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,731 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,732 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,732 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,732 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,732 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,732 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,733 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,734 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,735 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,736 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,737 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,738 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,739 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,740 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,741 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,742 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,743 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,744 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,744 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,744 [7388] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-19 18:50:45,777 [7388] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-07-19 18:50:45,778 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,778 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,778 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-19 18:50:45,779 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,780 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-19 18:50:45,781 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,782 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,783 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,784 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,785 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-19 18:50:45,786 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,787 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,788 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,789 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,790 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,791 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,792 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,793 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,794 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,795 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,796 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,797 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,797 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,797 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,798 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,798 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,798 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,798 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,798 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,799 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,799 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,799 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,800 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,800 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,800 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,801 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,801 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,801 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,801 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,802 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,802 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,802 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,802 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,803 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,803 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,803 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,804 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,804 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,804 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,805 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,805 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,805 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,806 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,806 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,806 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,807 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,807 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,807 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-19 18:50:45,807 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,808 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,808 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,808 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,809 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-19 18:50:45,809 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,809 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,810 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-19 18:50:45,810 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,810 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,810 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,811 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,811 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,811 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,812 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,812 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,812 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,812 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,813 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,813 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-19 18:50:45,813 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,814 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-19 18:50:45,814 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,814 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,814 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,815 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-19 18:50:45,815 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,815 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,816 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,816 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,816 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,816 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,817 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,817 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-19 18:50:45,817 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,818 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-19 18:50:45,818 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,818 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,818 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,819 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,819 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-19 18:50:45,819 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,820 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,820 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,820 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,820 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,821 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,821 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,821 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,822 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,822 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,822 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,822 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-19 18:50:45,823 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,823 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,823 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,824 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-19 18:50:45,824 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,824 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,825 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,825 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,825 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,826 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,826 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,826 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,827 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,827 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,827 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,828 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,828 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,828 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,829 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,829 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,830 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,830 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,830 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,831 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,831 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,832 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,833 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-19 18:50:45,834 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,834 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,835 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-19 18:50:45,835 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,835 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,836 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,836 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,836 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,836 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,837 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,837 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,837 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-19 18:50:45,838 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,838 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,838 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,838 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,839 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,839 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,839 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,840 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-19 18:50:45,840 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,840 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,840 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,841 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,841 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-19 18:50:45,841 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,842 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,842 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,842 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,842 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,843 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,843 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-19 18:50:45,843 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,844 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,844 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,844 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,844 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,845 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,852 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,853 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,853 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,853 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,854 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,854 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,854 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,855 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,855 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,855 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,856 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,856 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,856 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-19 18:50:45,857 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,857 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,858 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,858 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,858 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,859 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,859 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,859 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-19 18:50:45,860 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,860 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-19 18:50:45,862 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,862 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,863 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,863 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,863 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,864 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,864 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,864 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,864 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,865 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,865 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,865 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,866 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,866 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,866 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,866 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,867 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,867 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-19 18:50:45,868 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-19 18:50:45,868 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,869 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,871 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,871 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,872 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,873 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,873 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,873 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-19 18:50:45,874 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,874 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,874 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,874 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,875 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,875 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,875 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,876 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,876 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,876 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,876 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,877 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,877 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,878 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,878 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-19 18:50:45,878 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,879 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,879 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,879 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,879 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-19 18:50:45,880 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,880 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,880 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,881 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,881 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,881 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,881 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,882 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,882 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,882 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,883 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,883 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,883 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,884 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,884 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,884 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,885 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,885 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,885 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,886 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,886 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,886 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,887 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,887 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,887 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,888 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,888 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-19 18:50:45,888 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,889 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-19 18:50:45,889 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,889 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,890 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,890 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-19 18:50:45,890 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,891 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,892 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,892 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-19 18:50:45,892 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,893 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,893 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,893 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-19 18:50:45,894 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,894 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,894 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,895 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-19 18:50:45,895 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,895 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-19 18:50:45,895 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,896 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,896 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,896 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,896 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,897 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,897 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,897 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,897 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,897 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,898 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,899 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-19 18:50:45,900 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-19 18:50:45,900 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,900 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,900 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-19 18:50:45,900 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,901 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,902 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,902 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,902 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,902 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-19 18:50:45,903 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,904 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,905 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,906 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,907 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,907 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-19 18:50:45,907 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,907 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,907 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,908 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-19 18:50:45,909 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-19 18:50:45,910 [7388] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-20 19:15:31,736 [14896] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-20 19:15:31,737 [14896] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-20 19:15:31,737 [14896] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-20 19:15:31,739 [14896] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-20 19:15:31,739 [14896] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-20 19:15:31,740 [14896] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-20 19:20:44,848 [14896] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-07-20 19:20:45,890 [14896] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\30041519\.matplotlib
2021-07-20 19:20:45,892 [14896] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-20 19:20:45,901 [14896] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data
2021-07-20 19:20:45,901 [14896] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file C:\Users\30041519\Anaconda3_8\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2021-07-20 19:20:45,903 [14896] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2021-07-20 19:20:45,903 [14896] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2021-07-20 19:20:45,903 [14896] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2021-07-20 19:20:45,903 [14896] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1250', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas.compat', 'pandas.compat.numpy', '_cython_0_29_20', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs', 'pandas._libs', 'pandas._libs.hashtable', 'fractions', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._typing', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas._libs.properties', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.util.hashing', 'pandas.util', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'dateutil.easter', 'pandas.tseries.offsets', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.util', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', '_csv', 'csv', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'helper', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'joblib.hashing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.spawn', 'multiprocessing.popen_spawn_win32', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_win32', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._win_reduction', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'sklearn.model_selection._split', 'sklearn.utils.metaestimators', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.utils._mask', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils._random', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', '_yaml', 'yaml.cyaml', 'yaml', 'dask.config', 'dask.utils_test', 'dask.core', 'dask.optimization', 'dask.utils', 'dask.datasets', 'dask.order', 'dask.callbacks', 'dask.local', 'toolz.compatibility', 'toolz.utils', 'toolz.itertoolz', 'toolz._signatures', 'toolz.functoolz', 'toolz.dicttoolz', 'toolz.recipes', 'toolz.curried.operator', 'toolz.curried.exceptions', 'toolz.curried', 'toolz.sandbox.core', 'toolz.sandbox.parallel', 'toolz.sandbox', 'toolz', '_cython_0_29_13', 'cytoolz.compatibility', 'cytoolz.utils', 'cytoolz.itertoolz', 'cytoolz._signatures', 'cytoolz.functoolz', 'cytoolz.dicttoolz', 'cytoolz.recipes', 'cytoolz.curried.operator', 'cytoolz.curried.exceptions', 'cytoolz.curried', 'cytoolz._version', 'cytoolz', 'tlz.compatibility', 'tlz.utils', 'tlz.itertoolz', 'tlz._signatures', 'tlz.functoolz', 'tlz.dicttoolz', 'tlz.recipes', 'tlz._version', 'tlz._build_tlz', 'tlz', 'dask.system', 'dask.threaded', 'dataclasses', 'dask.compatibility', 'dask.context', 'dask.hashing', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'dask.multiprocessing', 'dask.base', 'dask.highlevelgraph', 'dask.delayed', 'dask._version', 'dask', 'dask.blockwise', 'dask.array.blockwise', 'tlz.curried.operator', 'tlz.curried', 'dask.array.numpy_compat', 'dask.array.chunk', 'dask.sizeof', 'dask.array.slicing', 'dask.array.optimization', 'dask.array.utils', 'dask.array.core', 'dask.array.tiledb_io', 'dask.array.ufunc', 'dask.array.wrap', 'dask.array.creation', 'dask.array.einsumfuncs', 'dask.array.routines', 'dask.array.reshape', 'dask.array.reductions', 'dask.array.percentile', 'dask.array.ma', 'dask.array.random', 'dask.array.linalg', 'dask.array.overlap', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'dask.array.fft', 'dask.array.backends', 'dask.array.rechunk', 'dask.array.gufunc', 'dask.array', 'dask.dataframe._compat', 'dask.dataframe._accessor', 'dask.dataframe.extensions', 'dask.dataframe._dtypes', 'dask.dataframe.utils', 'dask.dataframe.methods', 'dask.dataframe.accessor', 'dask.dataframe.categorical', 'dask.dataframe.optimize', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'dask.dataframe.core', 'dask.dataframe.shuffle', 'dask.dataframe.groupby', 'dask.dataframe.io.io', 'fsspec._version', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.utils', 'pyarrow._generated_version', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'fsspec.spec', 'fsspec.registry', 'fsspec.compression', 'fsspec.caching', 'fsspec.core', 'fsspec.mapping', 'fsspec', 'dask.bytes.core', 'dask.bytes', 'fsspec.implementations', 'fsspec.implementations.local', 'dask.dataframe.io.csv', 'dask.dataframe.io.hdf', 'dask.dataframe.io.sql', 'dask.dataframe.io.json', 'dask.dataframe.io.demo', 'dask.dataframe.io.parquet.core', 'dask.dataframe.io.parquet', 'dask.dataframe.io', 'dask.dataframe.numeric', 'dask.dataframe.multi', 'dask.dataframe.rolling', 'dask.dataframe.backends', 'dask.dataframe.reshape', 'dask.dataframe.io.utils', 'dask.dataframe.io.orc', 'dask.dataframe', 'distributed.compatibility', 'distributed.config', 'concurrent.futures.thread', 'distributed.comm.registry', 'click._winconsole', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'distributed.metrics', 'distributed.utils', 'distributed.comm.addressing', 'distributed.comm.core', 'distributed.protocol.compression', 'msgpack._version', 'msgpack.exceptions', 'msgpack.ext', 'msgpack._cmsgpack', 'msgpack', 'distributed.protocol.pickle', 'distributed.protocol.utils', 'distributed.protocol.serialize', 'distributed.protocol.core', 'distributed.protocol.cuda', 'distributed.protocol', 'distributed.comm.utils', 'distributed.comm.inproc', 'tornado.platform.windows', 'tornado.platform.auto', 'stringprep', 'encodings.idna', 'tornado.netutil', 'tornado.iostream', 'tornado.tcpclient', 'tornado.process', 'tornado.tcpserver', 'distributed.system', 'distributed._concurrent_futures_thread', 'distributed.threadpoolexecutor', 'distributed.comm.tcp', 'distributed.comm.ucx', 'distributed.comm', 'distributed.profile', 'distributed.system_monitor', 'distributed.core', 'distributed.batched', 'distributed.utils_comm', 'distributed.cfexecutor', 'distributed.publish', 'distributed.pubsub', 'distributed.security', 'distributed.sizeof', 'distributed.locket', 'distributed.diskutils', 'http.cookies', 'tornado.httputil', 'tornado.http1connection', 'tornado.httpserver', 'tornado._locale_data', 'tornado.locale', 'tornado.template', 'tornado.routing', 'tornado.web', 'distributed.http.utils', 'distributed.http', 'distributed.http.routing', 'distributed.versions', 'distributed.node', 'tornado.httpclient', 'distributed.preloading', 'distributed.proctitle', 'distributed.utils_perf', 'distributed.diagnostics.plugin', 'distributed.diagnostics.graph_layout', 'distributed.diagnostics.progress', 'distributed.diagnostics', 'distributed.worker', 'distributed.client', 'distributed.actor', 'distributed.deploy.adaptive_core', 'distributed.deploy.adaptive', 'distributed.deploy.cluster', 'sortedcontainers.sortedlist', 'sortedcontainers.sortedset', 'sortedcontainers.sorteddict', 'sortedcontainers', 'distributed.queues', 'distributed.semaphore', 'distributed.recreate_exceptions', 'distributed.lock', 'distributed.event', 'distributed.stealing', 'distributed.variable', 'distributed.scheduler', 'distributed.deploy.spec', 'distributed.process', 'distributed.nanny', 'distributed.deploy.local', 'distributed.deploy.ssh', 'distributed.deploy', 'distributed.diagnostics.progressbar', 'distributed.worker_client', 'distributed._version', 'distributed', 'dask.distributed', 'xgboost.compat', 'xgboost.libpath', 'xgboost.core', 'xgboost.rabit', 'xgboost.callback', 'xgboost.training', 'xgboost.tracker', 'xgboost.sklearn', 'xgboost.dask', 'xgboost.plotting', 'xgboost', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-07-20 19:20:45,969 [14896] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\30041519\.matplotlib
2021-07-20 19:20:45,979 [14896] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\30041519\.matplotlib\fontlist-v310.json
2021-07-20 19:20:46,339 [14896] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-20 19:20:46,343 [14896] DEBUG    matplotlib.pyplot:224: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-07-20 19:20:50,741 [14896] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-07-20 19:22:17,837 [14896] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-07-20 19:22:17,838 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,838 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,838 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-20 19:22:17,838 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,838 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,839 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,840 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,841 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,841 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,841 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,841 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:17,842 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,843 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,843 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,843 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,843 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,844 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,845 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,846 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,847 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,848 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,849 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,850 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,851 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,852 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,853 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,854 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,855 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,856 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,857 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,858 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,859 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-20 19:22:17,860 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,861 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,862 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-20 19:22:17,863 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,864 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,865 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,865 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,865 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,865 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-20 19:22:17,865 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-20 19:22:17,866 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:17,867 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,868 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,869 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,870 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:17,871 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,872 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,873 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,874 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,875 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,876 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,877 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,878 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,879 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,880 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,881 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:17,882 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,883 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,884 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,885 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,886 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,887 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,888 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,889 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:17,890 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:17,891 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:17,892 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,893 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,894 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,895 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,896 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,897 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,898 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,899 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,900 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,901 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,902 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,903 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,904 [14896] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-07-20 19:22:17,985 [14896] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-07-20 19:22:17,986 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,986 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,987 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2021-07-20 19:22:17,987 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,987 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,988 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,988 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2021-07-20 19:22:17,988 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,989 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-07-20 19:22:17,989 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,989 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,990 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,990 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,994 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-07-20 19:22:17,994 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,994 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,995 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,995 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,995 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,995 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:17,996 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,996 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,996 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,997 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2021-07-20 19:22:17,997 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,998 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,998 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:17,998 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:17,998 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:17,999 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:17,999 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:17,999 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,000 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,000 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,000 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,000 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,001 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,009 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,009 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,009 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,009 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,010 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2021-07-20 19:22:18,010 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,010 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,010 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,011 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,011 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanT' (romant__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,012 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,012 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,012 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,013 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,013 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,014 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal light condensed>) = 10.44
2021-07-20 19:22:18,014 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,019 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,020 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,020 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,020 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,021 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2021-07-20 19:22:18,021 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-07-20 19:22:18,021 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,021 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,022 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,022 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,022 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,022 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,022 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,024 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,024 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,024 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,024 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2021-07-20 19:22:18,025 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,025 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,027 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,028 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,028 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2021-07-20 19:22:18,032 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:18,033 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,033 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal bold normal>) = 11.335
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,034 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,035 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romab___.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,036 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,037 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,037 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,037 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:18,037 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,037 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,038 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,039 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,040 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,040 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,040 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,040 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,041 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,042 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,043 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,044 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,045 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2021-07-20 19:22:18,046 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,047 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:18,048 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,048 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,048 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,048 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,048 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,049 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Icons' (SAPGUI-icons.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,050 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,051 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,052 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal medium normal>) = 10.145
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,053 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,054 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:18,055 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2021-07-20 19:22:18,056 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,057 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,057 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,057 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,057 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,057 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal black condensed>) = 10.725
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,058 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,059 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal black condensed>) = 11.725
2021-07-20 19:22:18,060 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,061 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,061 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,061 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,061 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25
2021-07-20 19:22:18,061 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2021-07-20 19:22:18,062 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPGUI-Belize-Icons' (SAPGUI-Belize-Icons.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,063 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,064 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,065 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal roman normal>) = 11.145
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,066 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPDings' (sapdn.ttf) normal normal normal normal>) = 10.0
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,067 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,068 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,069 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal light condensed>) = 11.44
2021-07-20 19:22:18,070 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,071 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,072 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimon__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,073 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,074 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,075 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,076 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal bold condensed>) = 11.535
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2021-07-20 19:22:18,077 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,078 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,079 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SAPIcons' (sapin.ttf) normal normal normal normal>) = 10.0
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:18,080 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,081 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2021-07-20 19:22:18,082 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2021-07-20 19:22:18,083 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal black normal>) = 11.525
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,084 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,085 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanD' (romand__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,086 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2021-07-20 19:22:18,087 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romai___.ttf) italic normal roman normal>) = 11.145
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial monospaced for SAP' (arimonbd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,088 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'RomanS' (romans__.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal light normal>) = 10.24
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,089 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,090 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,090 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,090 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,090 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2021-07-20 19:22:18,090 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Romantic' (romantic.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal roman normal>) = 10.145
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-07-20 19:22:18,091 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-07-20 19:22:18,092 [14896] DEBUG    matplotlib.font_manager:1280: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\30041519\\Anaconda3_8\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
